import os
import random

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, InputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from geopy import Nominatim
from geopy.distance import geodesic
from phonenumbers import parse

import ads_processing
import buffers
import config
import database
import menu

bot = Bot(config.TELEGRAM_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    """
    –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
    """

    state = dp.current_state(user=message.from_user.id)  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    users_id = [user[0] for user in database.get_data(table='users')]  # –ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã—Ö –ª—é–¥–µ–π

    if message.from_user.id not in users_id:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –≤–ø–µ—Ä—ã–µ. –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. \
                             \n\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?', reply_markup=types.ReplyKeyboardRemove())

        await state.set_state('register:name')  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    else:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=InputFile('media/start.jpg'),
                             caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!',
                             reply_markup=menu.main_menu)

        await state.reset_state()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.CONTACT, types.ContentType.LOCATION],
                    state=['register:name', 'register:number', 'register:location', 'register:radius'])
async def register(message: types.Message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
    """

    state = dp.current_state(user=message.from_user.id)  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    curent_state = await state.get_state()

    step = curent_state.split(':')[1]  # —É–∑–Ω–∞–µ–º –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if step == 'name':
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.content_type == 'text':
            buffers.register_buf[message.from_user.id] = list()
            buffers.register_buf[message.from_user.id].append(message.text.title())  # —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–º—è –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±",
                                              request_contact=True))  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

            await message.answer(
                '–ó–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏. \n\n–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: +x xxx xxx xx-xx \n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                reply_markup=keyboard)
            await state.set_state('register:number')  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        else:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –∏–º—è.')

    elif step == 'number':
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if message.content_type == 'contact':  # –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
            number = message.contact.phone_number  # –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        elif message.content_type == 'text':
            try:
                x = parse(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –ª–∏ —ç—Ç–æ
            except:
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +x xxx xxx xx-xx, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
                return

            number = message.text  # –ø–æ–ª—É—á–µ–º –Ω–æ–º–µ—Ä
        else:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')
            return

        buffers.register_buf[message.from_user.id].append(number)  # —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üõ∞", request_location=True))

        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –¥–ª—è –±–æ–ª–µ–µ –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.',
                             reply_markup=keyboard)
        await state.set_state('register:location')  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

    elif step == 'location':
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if message.content_type == "location":
            buffers.register_buf[message.from_user.id].append(
                message.location.latitude)  # –ø–æ–º–µ—â–∞–µ–º —à–∏—Ä–æ—Ç—É –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            buffers.register_buf[message.from_user.id].append(
                message.location.longitude)  # –ø–æ–º–µ—â–∞–µ–º –¥–æ–ª–≥–æ—Ç—É –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä

            await message.answer(
                '–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è. (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤ –º–µ—Ç—Ä–∞—Ö)',
                reply_markup=types.ReplyKeyboardRemove())
            await state.set_state('register:radius')  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞

        else:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.')

    elif step == 'radius':
        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        try:
            radius = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        except:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!')
            return

        buffers.register_buf[message.from_user.id].append(radius)  # –ø–æ–º–µ—â—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä —Ä–∞–¥–∏—É—Å

        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! \n–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞',
                             reply_markup=types.ReplyKeyboardRemove())

        await bot.send_photo(chat_id=message.from_user.id,
                             photo=InputFile('media/start.jpg'),
                             caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!',
                             reply_markup=menu.main_menu)

        await state.reset_state()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        database.register(buffers.register_buf[message.from_user.id],
                          message)  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≤ –±–¥
        del buffers.register_buf[message.from_user.id]  # —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞


@dp.message_handler(content_types=types.ContentType.TEXT)
async def main_menu(message: types.Message):
    """
    –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    state = dp.current_state(user=message.from_user.id)

    if message.text == menu.profile_button.text:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
        user = database.get_data(id=message.from_user.id, table='users')[0]
        nominatim = Nominatim(user_agent='user')

        name = user[2]
        number = user[3]
        location = str(nominatim.reverse(user[4])).split(', ')
        location = location[0] + ', ' + location[1] + ', ' + location[2] + ', ' + location[-1]
        radius = user[5]

        text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:" \
               f"\n–ò–º—è: *{name}*" \
               f"\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{number}*" \
               f"\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: *{location}*" \
               f"\n–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: *{radius} –º*"

        await message.answer(text, reply_markup=menu.profile_menu)
        await state.set_state('profile')

    elif message.text == menu.place_add_button.text:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –†–∞–∑–º–µ—â–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=menu.categories_menu)
        await state.set_state('place_add:category')  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    elif message.text == menu.find_ads_button.text:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=menu.categories_menu)
        await state.set_state('find_ads:category')

    elif message.text == menu.favourites_button.text:
        ads = database.get_data(message.from_user.id, 'users')[0][6].split()

        if len(ads) != 0:
            keyboard = InlineKeyboardMarkup()
            buttons = []

            for ad in ads:
                try:
                    ad_data = database.get_data(ad, 'ads')[0]
                    buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'favourites:view:{ad_data[0]}'))
                except:
                    ads.remove(ad)
                    database.update_data({'favourites': ' '.join(ads)}, message.from_user.id, 'users')

            keyboard.add(*buttons)

            await message.answer('–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', reply_markup=keyboard)
        else:
            await message.answer('–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')

    elif message.text == menu.subscribes_button.text:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=menu.get_subscribe_buttons(message.from_user.id))


@dp.message_handler(content_types=types.ContentType.TEXT, state='find_ads:category')
async def find_ads(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if message.text == menu.back_button.text:
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=menu.main_menu)
        try:
            del buffers.find_add_buf[message.from_user.id]
        except:
            pass
        await state.reset_state()

        return

    if message.text in menu.names:
        ads_id = ads_processing.find_ads(message.from_user.id, message.text)

        if len(ads_id) == 0:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.' +
                                 '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞, –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
            return

        await message.answer('–ü–æ–∏—Å–∫.', reply_markup=menu.main_menu)
        await state.reset_state()

        user = database.get_data(message.from_user.id, 'users')[0]
        user_coord = tuple(user[4].split(', '))

        for id in ads_id[:3]:
            ad = database.get_data(id, 'ads')[0]
            ad_coord = tuple(ad[11].split(', '))

            photo = ad[4]
            title = ad[1]
            text = ad[2]
            price = ad[3]
            distance = geodesic(ad_coord, user_coord).m
            salesname = database.get_data(ad[12], 'users')[0][2]
            number = database.get_data(ad[12], 'users')[0][3]
            photos_count = 6 - list(ad[4:10]).count(None)

            write = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data=f'find_ads:write:{str(number)}')

            ad_keyboard = InlineKeyboardMarkup()
            ad_keyboard.add(write)

            favourites = user[6].split()
            if ad[0] not in favourites:
                favourites_btn = InlineKeyboardButton('–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f'find_ads:favourites:{ad[0]}')
                ad_keyboard.add(favourites_btn)

            if photos_count > 1:
                more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', callback_data=f'find_ads:more_photo:{ad[0]}')
                ad_keyboard.add(more)

            caption = f'*{title}* ' \
                      f'\n\n{text} ' \
                      f'\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: *{salesname}*' \
                      f'\n–¶–µ–Ω–∞: *{price} KRW*' \
                      f'\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: *{int(distance)} –º*'

            if photo != None:
                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=photo,
                                     caption=caption,
                                     reply_markup=ad_keyboard)

            else:
                await message.answer(caption, reply_markup=ad_keyboard)

        if len(ads_id) > 3:
            more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å', callback_data=f'find_ads:more:{message.text}:3')
            keyboard = InlineKeyboardMarkup().add(more)
            await message.answer('–ù–∞–π–¥–µ–Ω–æ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–≤–ª–µ–Ω–∏–π. –ü–æ–∫–∞–∑–∞—Ç—å?', reply_markup=keyboard)


    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ!')


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.CONTACT, types.ContentType.LOCATION],
                    state=['profile', 'profile:radius', 'profile:contact'])
async def profile(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—å
    """
    state = dp.current_state(user=message.from_user.id)
    curent_state = await state.get_state()

    if curent_state == 'profile:radius':  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        if message.text == menu.back_button.text:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            await state.set_state('profile')

        else:
            try:
                radius = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            except:
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!')
                return

            database.update_data({'radius': radius}, id=message.from_user.id, table='users')  # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏—É—Å –≤ –±–¥
            await state.set_state('profile')

    elif curent_state == 'profile:contact':  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if message.text == '–ù–∞–∑–∞–¥':  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            await state.set_state('profile')

        else:
            if message.content_type == 'contact':  # –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
                number = message.contact.phone_number  # –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
            elif message.content_type == 'text':
                try:
                    x = parse(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –ª–∏ —ç—Ç–æ
                except:
                    await message.answer(
                        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +x xxx xxx xx-xx, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
                    return

                number = message.text  # –ø–æ–ª—É—á–µ–º –Ω–æ–º–µ—Ä
            else:
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')
                return

            database.update_data({'number': number}, id=message.from_user.id, table='users')  # –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ –≤ –±–¥

            await state.set_state('profile')

    else:
        if message.content_type == 'location':  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –±–¥
            database.update_data({'location': str(message.location.latitude) + ', ' + str(message.location.longitude)},
                                 id=message.from_user.id,
                                 table='users')  # –≤–Ω–æ—Å–∏–º –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –±–¥ –≤ –±–¥

        elif message.text == menu.change_number_button.text:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"
            back_button = KeyboardButton('–ù–∞–∑–∞–¥')
            number_button = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±', request_contact=True)
            back_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(number_button, back_button)

            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n\n*–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: +x xxx xxx xx-xx*',
                                 reply_markup=back_menu)

            await state.set_state('profile:contact')  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            return

        elif message.text == menu.change_radius_button.text:  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è. (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤ –º–µ—Ç—Ä–∞—Ö)',
                                 reply_markup=menu.back_menu)

            await state.set_state('profile:radius')  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
            return

        elif message.text == menu.my_ads_button.text:
            ads = database.get_data(message.from_user.id, 'users')[0][8].split()

            if len(ads) != 0:
                keyboard = InlineKeyboardMarkup()
                buttons = []

                for ad in ads:
                    ad_data = database.get_data(ad, 'ads')[0]
                    buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'my_ads:{ad_data[0]}'))

                keyboard.add(*buttons)

                await message.answer('–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', reply_markup=keyboard)

            else:
                await message.answer('–£ –í–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')
            return

        elif message.text == menu.back_main_menu_button.text:  # –≤ –≥–ª–∞–Ω–æ–µ –º–µ–Ω—é
            await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=menu.main_menu)
            await state.reset_state()
            return

    user = database.get_data(id=message.from_user.id, table='users')[0]  # –ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞
    nominatim = Nominatim(user_agent='user')

    name = user[2]  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è
    number = user[3]  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä
    location = str(nominatim.reverse(user[4])).split(', ')
    location = location[0] + ', ' + location[1] + ', ' + location[2] + ', ' + location[-1]  # –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    radius = user[5]  # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–¥–∏—É—Å

    text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:" \
           f"\n–ò–º—è: *{name}*" \
           f"\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{number}*" \
           f"\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: *{location}*" \
           f"\n–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: *{radius} –º*"

    await message.answer(text, reply_markup=menu.profile_menu)


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO],
                    state=['place_add:category', 'place_add:title', 'place_add:text', 'place_add:photo',
                           'place_add:price'])
async def place_add(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    step = await state.get_state()
    step = step.split(':')[1]

    if message.content_type == 'text':
        if step == 'category':
            if message.text == menu.back_button.text:
                await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=menu.main_menu)
                try:
                    del buffers.place_add_buf[message.chat.id]
                except:
                    pass
                await state.reset_state()
                return

            if message.text in menu.names:
                buffers.place_add_buf[message.from_user.id] = dict()
                buffers.place_add_buf[message.from_user.id]['category'] = message.text
                await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                                     reply_markup=menu.back_menu)
                await state.set_state('place_add:title')

            else:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ!')

        elif step == 'title':
            if message.text == menu.back_button.text:
                await message.answer('–ù–∞–∑–∞–¥! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                                     reply_markup=menu.categories_menu)
                await state.set_state('place_add:category')
                return

            if len(message.text) <= 50:
                buffers.place_add_buf[message.from_user.id]['title'] = message.text
                await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 900 —Å–∏–º–≤–æ–ª–æ–≤)',
                                     reply_markup=menu.back_menu)
                await state.set_state('place_add:text')


            else:
                await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è 50 —Å–∏–º–≤–æ–ª–æ–≤!')


        elif step == 'text':
            if message.text == menu.back_button.text:
                await message.answer('–ù–∞–∑–∞–¥! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                await state.set_state('place_add:title')
                return

            if len(message.text) <= 900:
                buffers.place_add_buf[message.from_user.id]['text'] = message.text

                keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                next = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ')
                keyboard.add(next, menu.back_button)

                await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ)',
                                     reply_markup=keyboard)
                buffers.place_add_buf[message.chat.id]['photos'] = list()
                buffers.place_add_buf[message.chat.id]['pre_photos'] = list()

                await state.set_state('place_add:photo')


            else:
                await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è 900 —Å–∏–º–≤–æ–ª–æ–≤!')

        elif step == 'price':
            if message.text == menu.back_button.text:
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                next = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ')
                keyboard.add(next, menu.back_button)

                await message.answer('–ù–∞–∑–∞–¥! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ)',
                                     reply_markup=keyboard)
                buffers.place_add_buf[message.from_user.id]['photos'].clear()
                buffers.place_add_buf[message.from_user.id]['pre_photos'].clear()
                await state.set_state('place_add:photo')
                return

            try:
                price = int(message.text)
            except:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
                return

            buffers.place_add_buf[message.from_user.id]['price'] = price

            database.new_add(buffers.place_add_buf[message.from_user.id], message)
            del buffers.place_add_buf[message.from_user.id]

            await message.answer('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!', reply_markup=menu.main_menu)
            await state.reset_state()

            ad = database.get_data(message.message_id, 'ads')[0]
            ad_category = ad[10]
            ad_coord = tuple(ad[11].split(', '))
            photo = ad[4]
            title = ad[1]
            text = ad[2]
            price = ad[3]
            salesname = database.get_data(ad[12], 'users')[0][2]
            number = database.get_data(ad[12], 'users')[0][3]
            photos_count = 6 - list(ad[4:10]).count(None)

            for user in database.get_data(table='users'):
                subs_category = user[7].split(', ')
                user_coord = tuple(user[4].split(', '))

                distance = geodesic(ad_coord, user_coord).m

                if ad_category in subs_category and distance <= int(user[5]) and str(ad[12]) != str(user[0]):
                    user_coord = tuple(user[4].split(', '))

                    write = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data=f'find_ads:write:{str(number)}')
                    favourites_btn = InlineKeyboardButton('–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f'find_ads:favourites:{ad[0]}')

                    ad_keyboard = InlineKeyboardMarkup()
                    ad_keyboard.add(write, favourites_btn)

                    if photos_count > 1:
                        more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', callback_data=f'find_ads:more_photo:{ad[0]}')
                        ad_keyboard.add(more)

                    distance = geodesic(ad_coord, user_coord).m

                    caption = f'*–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {ad_category}!*' \
                              f'\n\n*{title}* ' \
                              f'\n\n{text} ' \
                              f'\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: *{salesname}*' \
                              f'\n–¶–µ–Ω–∞: *{price} KRW*' \
                              f'\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: *{int(distance)} –º*'

                    if photo != None:
                        await bot.send_photo(chat_id=user[0],
                                             photo=photo,
                                             caption=caption,
                                             reply_markup=ad_keyboard)

                    else:
                        await bot.send_message(user[0], caption, reply_markup=ad_keyboard)

    if step == 'photo':
        if message.content_type == 'text':
            if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' or message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ':
                count = len(buffers.place_add_buf[message.from_user.id]['pre_photos'])

                for photo in buffers.place_add_buf[message.from_user.id]['pre_photos']:
                    if type(photo) is bytes:
                        continue

                    await photo.download('media/' + str(message.from_user.id) + photo['file_unique_id'] + '.jpg')

                    with open('media/' + str(message.from_user.id) + photo['file_unique_id'] + '.jpg', 'rb') as file:
                        buffers.place_add_buf[message.from_user.id]['photos'].append(file.read())
                        # buffers.place_add_buf[message.from_user.id]['pre_photos'].remove(photo)

                    os.remove('media/' + str(message.from_user.id) + photo['file_unique_id'] + '.jpg')

                await message.answer(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –í–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏: {count}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (KRW).',
                                     reply_markup=menu.back_menu)

                await state.set_state('place_add:price')


            elif message.text == '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ':
                buffers.place_add_buf[message.from_user.id]['pre_photos'].clear()

                keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                next = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ')
                keyboard.add(next, menu.back_button)

                await message.answer('–í—Å–µ —Ñ–æ—Ç–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –æ—á–∏—â–µ–Ω—ã.', reply_markup=keyboard)

            elif message.text == menu.back_button.text:
                await message.answer('–ù–∞–∑–∞–¥! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 900 —Å–∏–º–≤–æ–ª–æ–≤)',
                                     reply_markup=menu.back_menu)
                await state.set_state('place_add:text')
                return

        elif message.content_type == 'photo':

            if len(buffers.place_add_buf[message.from_user.id]['pre_photos']) < 6:
                buffers.place_add_buf[message.from_user.id]['pre_photos'].append(message.photo[-1])

                next = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
                clear = KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ')
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                keyboard.add(next, clear, menu.back_button)

                await message.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard)

            else:
                await message.reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: 6!')

    print(buffers.place_add_buf)


@dp.message_handler(content_types=types.ContentType.TEXT, state='*')
async def edit_ads(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    curent_state = await state.get_state()
    curent_state = curent_state.split(':')
    step = curent_state[0]
    id = curent_state[1]

    if step == 'edit_price':
        try:
            price = int(message.text)
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!')
            return

        database.update_data({'price': price}, id, 'ads')
        await message.answer('–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.', reply_markup=menu.profile_menu)
        await state.set_state('profile')

    if step == 'edit_title':
        if len(message.text) <= 50:
            database.update_data({'title': message.text}, id, 'ads')
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.', reply_markup=menu.profile_menu)
            await state.set_state('profile')
        else:
            await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 50 —Å–∏–º–≤–æ–ª–æ–≤!')

    if step == 'edit_text':
        if len(message.text) <= 900:
            database.update_data({'text': message.text}, id, 'ads')
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.', reply_markup=menu.profile_menu)
            await state.set_state('profile')
        else:
            await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 900 —Å–∏–º–≤–æ–ª–æ–≤!')


@dp.callback_query_handler(state="*")
async def inlines_button(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)

    if 'my_ads' in callback_query.data:
        if callback_query.data.split(':')[1] == 'back':
            ads = database.get_data(callback_query.from_user.id, 'users')[0][8].split()

            keyboard = InlineKeyboardMarkup()
            buttons = []

            for ad in ads:
                ad_data = database.get_data(ad, 'ads')[0]
                buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'my_ads:{ad_data[0]}'))

            keyboard.add(*buttons)

            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)
            await bot.send_message(callback_query.from_user.id, '–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', reply_markup=keyboard)

        elif callback_query.data.split(':')[1] == 'edit_price':
            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)

            await bot.send_message(callback_query.from_user.id,
                                   '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (KRW)')

            data = callback_query.data.split(':')

            await state.set_state(f'{data[1]}:{data[2]}')

        elif callback_query.data.split(':')[1] == 'edit_title':
            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)

            await bot.send_message(callback_query.from_user.id,
                                   '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)')

            data = callback_query.data.split(':')

            await state.set_state(f'{data[1]}:{data[2]}')

        elif callback_query.data.split(':')[1] == 'edit_text':
            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)

            await bot.send_message(callback_query.from_user.id,
                                   '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 900 —Å–∏–º–≤–æ–ª–æ–≤)')

            data = callback_query.data.split(':')

            await state.set_state(f'{data[1]}:{data[2]}')

        elif callback_query.data.split(':')[1] == 'delete':
            data = callback_query.data.split(':')

            yes = InlineKeyboardButton('–î–∞', callback_data=f'my_ads:delete_sure:{data[2]}')
            no = InlineKeyboardButton('–ù–µ—Ç', callback_data=f'my_ads:{data[2]}')
            keyboard = InlineKeyboardMarkup().add(yes).add(no)

            await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                                message_id=callback_query.message.message_id,
                                                reply_markup=keyboard)

        elif callback_query.data.split(':')[1] == 'delete_sure':
            data = callback_query.data.split(':')
            database.delete(data[2])

            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)

            await bot.send_message(callback_query.from_user.id, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')

        else:
            ad = database.get_data(callback_query.data.split(':')[1], 'ads')[0]
            title = ad[1]
            text = ad[2]
            price = ad[3]

            keyboard = InlineKeyboardMarkup(row_width=1)
            edit_price = InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É', callback_data=f'my_ads:edit_price:{ad[0]}')
            edit_title = InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'my_ads:edit_title:{ad[0]}')
            edit_text = InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'my_ads:edit_text:{ad[0]}')
            delete = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'my_ads:delete:{ad[0]}')
            back = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='my_ads:back')
            keyboard.add(edit_price, edit_title, edit_text, delete, back)

            await bot.delete_message(message_id=callback_query.message.message_id,
                                     chat_id=callback_query.from_user.id)

            if ad[4] == None:
                await bot.send_message(callback_query.from_user.id, f'*{title}* \n\n{text} \n\n{price}',
                                       reply_markup=keyboard)
            else:
                await bot.send_photo(photo=ad[4],
                                     chat_id=callback_query.from_user.id,
                                     caption=f'*{title}* \n\n{text} \n\n{price} KRW',
                                     reply_markup=keyboard)

    if 'find_ads' in callback_query.data:
        parts = callback_query.data.split(':')
        action = parts[1]

        if action == 'write':
            await bot.answer_callback_query(callback_query.id,
                                            show_alert=True,
                                            text=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {parts[2]}')

        if action == 'favourites':
            user = database.get_data(callback_query.from_user.id, 'users')[0]
            try:
                ad = database.get_data(parts[2], 'ads')[0]
            except:
                await callback_query.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º')
                await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
                return

            l = user[6].split()
            l.append(parts[2])
            database.update_data({'favourites': ' '.join(l)}, callback_query.from_user.id, 'users')

            number = database.get_data(ad[12], 'users')[0][3]

            write = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data=f'find_ads:write:{str(number)}')
            ad_keyboard = InlineKeyboardMarkup()
            ad_keyboard.add(write)

            photos_count = 6 - list(ad[4:10]).count(None)
            if photos_count > 1:
                more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', callback_data=f'find_ads:more_photo:{ad[0]}')
                ad_keyboard.add(more)

            await bot.answer_callback_query(callback_query.id,
                                            show_alert=False,
                                            text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')

            await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                                message_id=callback_query.message.message_id,
                                                reply_markup=ad_keyboard)

        if action == 'more_photo':
            try:
                ad = database.get_data(parts[2], 'ads')[0]
            except:
                await callback_query.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º')
                await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
                return

            photos = ad[4:10]
            media_group = types.MediaGroup()

            trash = []

            for photo in photos:
                if photo == None:
                    continue

                filename = str(random.randint(1, 999999)) + '.png'

                with open(filename, 'wb') as file:
                    file.write(photo)

                media_group.attach_photo(photo=InputFile(filename))

                trash.append(filename)

            await bot.send_media_group(chat_id=callback_query.from_user.id,
                                       media=media_group,
                                       reply_to_message_id=callback_query.message.message_id)
            for t in trash:
                os.remove(t)

        if action == 'more':
            count = int(parts[3])

            ads_id = ads_processing.find_ads(callback_query.from_user.id, parts[2])

            user = database.get_data(callback_query.from_user.id, 'users')[0]
            user_coord = tuple(user[4].split(', '))

            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

            for id in ads_id[count:count + 3]:
                ad = database.get_data(id, 'ads')[0]
                ad_coord = tuple(ad[11].split(', '))

                photo = ad[4]
                title = ad[1]
                text = ad[2]
                price = ad[3]
                distance = geodesic(ad_coord, user_coord).m
                salesname = database.get_data(ad[12], 'users')[0][2]
                number = database.get_data(ad[12], 'users')[0][3]
                photos_count = 6 - list(ad[4:10]).count(None)

                write = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data=f'find_ads:write:{str(number)}')

                ad_keyboard = InlineKeyboardMarkup()
                ad_keyboard.add(write)

                favourites = user[6].split()
                if ad[0] not in favourites:
                    favourites_btn = InlineKeyboardButton('–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f'find_ads:favourites:{ad[0]}')
                    ad_keyboard.add(favourites_btn)

                if photos_count > 1:
                    more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', callback_data=f'find_ads:more_photo:{ad[0]}')
                    ad_keyboard.add(more)

                caption = f'*{title}* ' \
                          f'\n\n{text} ' \
                          f'\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: *{salesname}*' \
                          f'\n–¶–µ–Ω–∞: *{price} KRW*' \
                          f'\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: *{int(distance)} –º*'

                if photo != None:
                    await bot.send_photo(chat_id=callback_query.from_user.id,
                                         photo=photo,
                                         caption=caption,
                                         reply_markup=ad_keyboard)

                else:
                    await bot.send_message(callback_query.from_user.id, caption, reply_markup=ad_keyboard)

            if len(ads_id) > count + 3:
                more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å', callback_data=f'find_ads:more:{parts[2]}:{count + 3}')
                keyboard = InlineKeyboardMarkup().add(more)
                await bot.send_message(callback_query.from_user.id,
                                       '–ù–∞–π–¥–µ–Ω–æ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–∫–∞–∑–∞—Ç—å?',
                                       reply_markup=keyboard)

    if 'favourites' in callback_query.data:
        parts = callback_query.data.split(':')
        action = parts[1]

        if action == 'back':
            ads = database.get_data(callback_query.from_user.id, 'users')[0][6].split()

            if len(ads) != 0:
                keyboard = InlineKeyboardMarkup()
                buttons = []

                for ad in ads:
                    try:
                        ad_data = database.get_data(ad, 'ads')[0]
                        buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'favourites:view:{ad_data[0]}'))
                    except:
                        ads.remove(ad)
                        database.update_data({'favourites': ' '.join(ads)}, callback_query.from_user.id, 'users')

                keyboard.add(*buttons)

                await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

                await bot.send_message(callback_query.from_user.id, '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', reply_markup=keyboard)
            else:
                await bot.send_message(callback_query.from_user.id, '–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')

        if action == 'view':
            try:
                ad = database.get_data(parts[2], 'ads')[0]
            except:
                await callback_query.answer('–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º')

                user = database.get_data(callback_query.from_user.id, 'users')[0]

                l = user[6].split()
                l.remove(parts[2])
                database.update_data({'favourites': ' '.join(l)}, callback_query.from_user.id, 'users')

                ads = database.get_data(callback_query.from_user.id, 'users')[0][6].split()

                if len(ads) != 0:
                    keyboard = InlineKeyboardMarkup()
                    buttons = []

                    for ad in ads:
                        try:
                            ad_data = database.get_data(ad, 'ads')[0]
                            buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'favourites:view:{ad_data[0]}'))
                        except:
                            ads.remove(ad)
                            database.update_data({'favourites': ' '.join(ads)}, callback_query.from_user.id, 'users')

                    keyboard.add(*buttons)

                    await bot.send_message(callback_query.from_user.id,
                                           '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
                                           reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id,
                                                '–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')

                await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
                return

            title = ad[1]
            text = ad[2]
            price = ad[3]
            photo = ad[4]
            salesname = database.get_data(ad[12], 'users')[0][2]
            number = database.get_data(ad[12], 'users')[0][3]
            photos_count = 6 - list(ad[4:10]).count(None)

            keyboard = InlineKeyboardMarkup(row_width=2)
            write = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data=f'find_ads:write:{str(number)}')
            del_favourites = InlineKeyboardButton('–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', callback_data=f'del_favourites:{ad[0]}')
            back = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='favourites:back')
            keyboard.add(write, del_favourites)

            if photos_count > 1:
                more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', callback_data=f'find_ads:more_photo:{ad[0]}')
                keyboard.add(more)

            keyboard.add(back)

            caption = f'*{title}* ' \
                      f'\n\n{text} ' \
                      f'\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: *{salesname}*' \
                      f'\n–¶–µ–Ω–∞: *{price} KRW*'

            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

            if photo != None:
                await bot.send_photo(chat_id=callback_query.from_user.id,
                                     photo=photo,
                                     caption=caption,
                                     reply_markup=keyboard)
            else:
                await bot.send_message(callback_query.from_user.id, caption, reply_markup=keyboard)

    if 'del_favourites' in callback_query.data:
        parts = callback_query.data.split(':')

        user_fav = database.get_data(callback_query.from_user.id, 'users')[0][6].split()
        user_fav.remove(parts[1])
        database.update_data({'favourites': ' '.join(user_fav)}, callback_query.from_user.id, 'users')

        ads = database.get_data(callback_query.from_user.id, 'users')[0][6].split()

        if len(ads) != 0:
            keyboard = InlineKeyboardMarkup()
            buttons = []

            for ad in ads:
                try:
                    ad_data = database.get_data(ad, 'ads')[0]
                    buttons.append(InlineKeyboardButton(ad_data[1], callback_data=f'favourites:view:{ad_data[0]}'))
                except:
                    ads.remove(ad)
                    database.update_data({'favourites': ' '.join(ads)}, callback_query.from_user.id, 'users')

            keyboard.add(*buttons)

            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

            await bot.send_message(callback_query.from_user.id, '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', reply_markup=keyboard)
        else:
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await bot.send_message(callback_query.from_user.id, '–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')

        await callback_query.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö')

    if 'subscribes' in callback_query.data:
        parts = callback_query.data.split(':')
        action = parts[1]

        user = database.get_data(callback_query.from_user.id, 'users')[0]

        if action == 'set':
            l = user[7].split(', ')
            l.append(parts[2])

            database.update_data({'categories': ', '.join(l)}, callback_query.from_user.id, 'users')

            await bot.edit_message_text(text=callback_query.message.text,
                                        chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=menu.get_subscribe_buttons(callback_query.from_user.id))

            await callback_query.answer(
                f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {parts[2]}, –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö')

        if action == 'del':
            l = user[7].split(', ')
            l.remove(parts[2])

            database.update_data({'categories': ', '.join(l)}, callback_query.from_user.id, 'users')

            await bot.edit_message_text(text=callback_query.message.text,
                                        chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=menu.get_subscribe_buttons(callback_query.from_user.id))

            await callback_query.answer(
                f'–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {parts[2]}, —Ç–µ–ø–µ—Ä—å –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö')

    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def photo(message: types.Message):
    print(message.photo[0].file_id)


executor.start_polling(dp)
